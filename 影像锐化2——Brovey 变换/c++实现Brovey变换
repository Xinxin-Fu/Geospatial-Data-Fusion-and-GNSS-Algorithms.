#include <iostream>
#include <vector>
#include "gdal_priv.h"
#include "cpl_conv.h"

using namespace std;

// Brovey 变换函数
void brovey_transform(const vector<float> &MS_band, const vector<float> &total_intensity,
                      const vector<float> &PAN, vector<float> &output) {
    int size = MS_band.size();
    for (int i = 0; i < size; ++i) {
        if (total_intensity[i] == 0) {
            output[i] = 0;
        } else {
            output[i] = (MS_band[i] / total_intensity[i]) * PAN[i];
        }
    }
}

int main() {
    GDALAllRegister();

    // 打开多光谱波段
    GDALDataset *R_band_ds = (GDALDataset*)GDALOpen("B4.tif", GA_ReadOnly);
    GDALDataset *G_band_ds = (GDALDataset*)GDALOpen("B3.tif", GA_ReadOnly);
    GDALDataset *B_band_ds = (GDALDataset*)GDALOpen("B2.tif", GA_ReadOnly);
    GDALDataset *PAN_ds = (GDALDataset*)GDALOpen("PAN.tif", GA_ReadOnly);

    if (!R_band_ds || !G_band_ds || !B_band_ds || !PAN_ds) {
        cout << "Error opening input files!" << endl;
        return -1;
    }

    int xSize = R_band_ds->GetRasterXSize();
    int ySize = R_band_ds->GetRasterYSize();
    int totalSize = xSize * ySize;

    // 创建输出文件
    GDALDriver *driver = GetGDALDriverManager()->GetDriverByName("GTiff");
    GDALDataset *R_out_ds = driver->Create("brovey_R.tif", xSize, ySize, 1, GDT_Float32, NULL);
    GDALDataset *G_out_ds = driver->Create("brovey_G.tif", xSize, ySize, 1, GDT_Float32, NULL);
    GDALDataset *B_out_ds = driver->Create("brovey_B.tif", xSize, ySize, 1, GDT_Float32, NULL);

    // 设置投影和仿射变换
    double geoTransform[6];
    R_band_ds->GetGeoTransform(geoTransform);
    R_out_ds->SetGeoTransform(geoTransform);
    G_out_ds->SetGeoTransform(geoTransform);
    B_out_ds->SetGeoTransform(geoTransform);

    const char* projection = R_band_ds->GetProjectionRef();
    R_out_ds->SetProjection(projection);
    G_out_ds->SetProjection(projection);
    B_out_ds->SetProjection(projection);

    // 读取数据
    vector<float> R_band(totalSize);
    vector<float> G_band(totalSize);
    vector<float> B_band(totalSize);
    vector<float> PAN_band(totalSize);

    R_band_ds->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, xSize, ySize,
                                          R_band.data(), xSize, ySize, GDT_Float32, 0, 0);
    G_band_ds->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, xSize, ySize,
                                          G_band.data(), xSize, ySize, GDT_Float32, 0, 0);
    B_band_ds->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, xSize, ySize,
                                          B_band.data(), xSize, ySize, GDT_Float32, 0, 0);
    PAN_ds->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, xSize, ySize,
                                       PAN_band.data(), xSize, ySize, GDT_Float32, 0, 0);

    // 计算总亮度
    vector<float> total_intensity(totalSize);
    for (int i = 0; i < totalSize; ++i) {
        total_intensity[i] = R_band[i] + G_band[i] + B_band[i];
        if (total_intensity[i] == 0) total_intensity[i] = 1e-6; // 防止除零
    }

    // 输出数组
    vector<float> R_out(totalSize);
    vector<float> G_out(totalSize);
    vector<float> B_out(totalSize);

    // Brovey 变换
    brovey_transform(R_band, total_intensity, PAN_band, R_out);
    brovey_transform(G_band, total_intensity, PAN_band, G_out);
    brovey_transform(B_band, total_intensity, PAN_band, B_out);

    // 写入输出
    R_out_ds->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, xSize, ySize,
                                         R_out.data(), xSize, ySize, GDT_Float32, 0, 0);
    G_out_ds->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, xSize, ySize,
                                         G_out.data(), xSize, ySize, GDT_Float32, 0, 0);
    B_out_ds->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, xSize, ySize,
                                         B_out.data(), xSize, ySize, GDT_Float32, 0, 0);

    // 关闭数据
    GDALClose(R_band_ds);
    GDALClose(G_band_ds);
    GDALClose(B_band_ds);
    GDALClose(PAN_ds);
    GDALClose(R_out_ds);
    GDALClose(G_out_ds);
    GDALClose(B_out_ds);

    cout << "Brovey transform completed successfully!" << endl;
    return 0;
}
